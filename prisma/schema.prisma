generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUBSCRIBER
  FOUNDER
  VENDOR
}

enum PostCategory {
  THOUGHT_LEADERSHIP
  NEWS
  EVENTS
  BLOG_POSTS
  BOOKS
  COURSES
  PODCASTS
  PRESENTATIONS
  PRESS_RELEASES
  TEMPLATES
  VIDEOS
  WEBINARS
  CASE_STUDIES
  WHITEPAPERS
  JOBS
  RECENT_JOBS
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  businessName  String?
  location      String?
  bio           String?
  occupation    String?
  canPostCDME   Boolean   @default(false)
  socialLinks   Json?     // Stores social media links as JSON: { facebook, twitter, linkedin, instagram }

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  profile       Profile?

  // Connection relationships
  sentConnections     Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")

  // Message relationships
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  conversations    Conversation[]   @relation("UserConversations")

  notifications Notification[]
  activities    Activity[]

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  password          String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  location    String?
  website     String?
  occupation  String?
  interests   String[]
  canPostCDME Boolean  @default(false)
  socialLinks Json?    // Stores social media links as JSON: { facebook, twitter, linkedin, instagram }

  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Post {
  id          String       @id @default(cuid())
  title       String
  content     String       @db.Text
  summary     String?      @db.Text
  published   Boolean      @default(true)
  category    PostCategory
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  upvoteCount Int         @default(0)

  // Common fields that might be used across categories
  featuredImage String?
  images        String[]
  tags          Tag[]      @relation("PostToTag")
  location      String?

  // Author relationship
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])

  // Social interactions
  comments    Comment[]

  // Category-specific fields
  eventDate           DateTime?    // For EVENTS
  eventLocation       String?      // For EVENTS
  eventRegistrationUrl String?     // For EVENTS, WEBINARS

  videoUrl            String?      // For VIDEOS, WEBINARS
  videoDuration       Int?         // For VIDEOS, WEBINARS, COURSES (in seconds)

  bookAuthor         String?      // For BOOKS
  bookISBN           String?      // For BOOKS
  bookPublisher      String?      // For BOOKS
  bookPublishDate    DateTime?    // For BOOKS

  podcastHost        String?      // For PODCASTS
  podcastUrl         String?      // For PODCASTS
  podcastPlatforms   String[]     // For PODCASTS

  courseInstructor   String?      // For COURSES
  courseDuration     String?      // For COURSES
  courseSkillLevel   String?      // For COURSES
  coursePlatform     String?      // For COURSES

  presentationVenue  String?      // For PRESENTATIONS
  presentationDate   DateTime?    // For PRESENTATIONS

  templateFileUrl    String?      // For TEMPLATES
  templateFileType   String?      // For TEMPLATES

  caseStudyCompany   String?      // For CASE_STUDIES
  caseStudyIndustry  String?      // For CASE_STUDIES

  whitepaperFileUrl  String?      // For WHITEPAPERS
  whitepaperTopics   String[]     // For WHITEPAPERS

  pressSource        String?      // For PRESS_RELEASES, NEWS
  pressContactInfo   String?      // For PRESS_RELEASES

  // Metadata
  metadata    Json?       // For any additional category-specific fields

  @@index([category])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  authorId  String
  author    User      @relation(fields: [authorId], references: [id])

  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostToTag")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  data      Json
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Connection {
  id         String           @id @default(cuid())
  status     ConnectionStatus @default(PENDING)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  sender     User            @relation("SentConnections", fields: [senderId], references: [id])
  senderId   String
  receiver   User            @relation("ReceivedConnections", fields: [receiverId], references: [id])
  receiverId String

  @@index([senderId])
  @@index([receiverId])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  senderId    String
  sender      User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([conversationId])
  @@map("message")
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  participants User[] @relation("UserConversations")
  messages     Message[]

  @@map("conversation")
}
